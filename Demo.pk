# comment
def q : (a: Type) -> a -> a = _ => x => x

# Church equality and naturals

def Eq : {a : Type} -> a -> a -> Type = {a} => x => y => (P : a -> Type) -> P x -> P y
def refl : {a : Type} -> {x : a} -> Eq x x = P => px => px

def Nat : Type = (a : Type) -> (a -> a) -> a -> a
def one : Nat = _ => f => x => f x
def suc : Nat -> Nat = z => a => f => x => f (z a f x)
def add : Nat -> Nat -> Nat = m => n => a => f => x => m a f (n a f x)
def mul : Nat -> Nat -> Nat = m => n => a => f => x => m a (n a f) x

# Benchmarks for conversion checking
def m2 = suc one
def m5 = add one (add m2 m2)
def m10 = add m5 m5
def m10b = mul m5 m2
def m100 = mul m10 m10
def m100b = mul m10b m10b
def m1k = mul m100 m10
def m1kb = mul m100b m10b
def m2k = mul m2 m1k
def m2kb = add m1kb m1kb
def m5k = mul m1k m5
def m5kb = mul m1kb m5
def m5kc = add m1k (mul m2k m2)
def m6k = add m5k m1k
def m6kb = add m5k m1k

def c10 : Eq m10 m10b = refl
def c100 : Eq m100 m100b = refl
# these two stack overflow in debug mode, so they're commented out
# def c5k : Eq m5k m5kb = refl
# def c6k : Eq m6k m6kb = refl
 #def c5b : Eq[FNat, m5k, m5kc] = Eq.Refl

# eta-expansion
def e : (f : Type -> Type) -> Eq f (x => f x) = f => refl

# meta tests
def c10b : Eq m10 m10b = refl
def q1 : (a : _) -> (b : _) -> a -> b -> _ = _ => _ => x => y => x
def q2 : (a : _) -> (b : _) -> a -> b -> _ = _ => _ => x => y => y

# testing for meta scope errors
# def a1 : _ = _
# def a2 : (a : Type) -> a = a => a1

# implicit parameters
def i1 = {Type} -> {b: Type} -> b -> b
def i2 : i1 -> Nat = f => f {Nat} {Nat} one
def i3 : i1 -> Nat = f => f one # note that we can't find a solution for the first implicit parameter here! this will be an error at some point
def i4 : {a : Type} -> a -> a = x => x

# inferred lambdas
def l1 = n => mul n m2
def l2 = x => y => x -> y
