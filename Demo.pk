# comment
def q : (a: Type) -> a -> a = _ => x => x

# Church equality and naturals

def Eq : {a : Type} -> a -> a -> Type = {a} => x => y => (P : a -> Type) -> P x -> P y
def refl : {a : Type} -> {x : a} -> Eq x x = P => px => px

def Nat : Type = (a : Type) -> (a -> a) -> a -> a
def zero : Nat = _ => f => x => x
def one : Nat = _ => f => x => f x
def suc : Nat -> Nat = z => a => f => x => f (z a f x)
def add : Nat -> Nat -> Nat = m => n => a => f => x => m a f (n a f x)
def mul : Nat -> Nat -> Nat = m => n => a => f => x => m a (n a f) x

# Benchmarks for conversion checking
def m2 = suc one
def m5 = add one (add m2 m2)
def m10 = add m5 m5
def m10b = mul m5 m2
def m100 = mul m10 m10
def m100b = mul m10b m10b
def m1k = mul m100 m10
def m1kb = mul m100b m10b
def m2k = mul m2 m1k
def m2kb = add m1kb m1kb
def m5k = mul m1k m5
def m5kb = mul m1kb m5
def m5kc = add m1k (mul m2k m2)
def m6k = add m5k m1k
def m6kb = add m5k m1k
# def m6kb = add m5kb m1kb

def c10 : Eq m10 m10b = refl
def c100 : Eq m100 m100b = refl

# eta-expansion
def e : (f : Type -> Type) -> Eq (x => f x) f = f => refl

# meta tests
def c10b : Eq m10 m10b = refl
def q1 : (a : _) -> (b : _) -> a -> b -> _ = _ => _ => x => y => x
def q2 : (a : _) -> (b : _) -> a -> b -> _ = _ => _ => x => y => y

# testing for meta scope errors
# def a1 : _ = _
# def a2 : (a : Type) -> a = a => a1

# implicit parameters
def i1 = {Type} -> {b: Type} -> b -> b
def i2 : i1 -> Nat = f => f {Nat} {Nat} one
def i3 : i1 -> Nat = f => f one # note that we can't find a solution for the first implicit parameter here! this will be an error at some point
def i4 : {a : Type} -> a -> a = x => x

# inferred lambdas
def l1 = n => mul n m2
def l2 = x => y => x -> y

def Pair : Type -> Type -> Type
  = A => B => (P : Type) -> (A -> B -> P) -> P

def dup : {A:Type} -> A -> Pair A A
  = a => P => p => p a a

def id : {A:Type} -> A -> A
 = x => x

def letTest = do
  let four = add m2 m2
  let five : Nat = suc four
  mul four five
# -> (λfour. (λfive. mul four five) (suc four)) (add m2 m2)

# testing type scope errors
# def illegal = do
#   let x : Type = Type
#   let p : Eq x x = refl
#   p

def Vec : Type -> Nat -> Type
 = A => n => (V : Nat -> Type) -> ({n:_} -> A -> V n -> V (suc n)) -> V zero -> V n

def nil : {A:Type} -> Vec A zero
 = V => c => n => n

def cons : {A:Type} -> {n:Nat} -> A -> Vec A n -> Vec A (suc n)
 = a => v => V => c => n => c a (v V c n)

def U = Type

def vecTest
  =
  (cons U (cons U (cons U (cons U (cons U (cons U (cons U
  (cons U (cons U (cons U (cons U (cons U nil))))))))))))


def pair : (a: Type, a) = (Type -> Type, x => x)
def ipair : {a:Type}, a = (x: Type) => x
def ppair : (Type, Type) = Type, Type
def spair : Type = Type, Type
def sigma = (a : Type, a, a -> a)
def tnat = {a : Type} -> (a -> a, a) -> a
# next step: pattern matching on tuples i.e. `def p : (a: Type, a) -> a = (_, x) => x`
def p5 : (Type, Type), Type = (Type, Type), Type
def pnat = (a: Type, a -> a, a) -> a
#def nnat = pnat ((Type -> Type), (x => x), (x => x))

def p : (a: Type, a) -> a = (_, x) => x

def fst : {a:_, b:_} -> (a, b) -> a = (x, _) => x
def snd : {a:_, b:_} -> (a, b) -> b = (_, x) => x

def third : {a:_, b:_, c: _} -> (a, b, c) -> c = (_, _, x) => x

def p6 = snd (fst p5)
def p7 : Nat = third (m2, m10, m100b)

def pzero : pnat = (_, _, x) => x
def psuc : pnat -> pnat = n => (_, f, x) => f (n (_, f, x))
def padd : (pnat, pnat) -> pnat = (m, n) => (_, f, x) => m (_, f, n (_, f, x))
def pmul : (pnat, pnat) -> pnat = (m, n) => (_, f, x) => m (_, (x => n (_, f, x)), x)
def pm1 = psuc pzero
def pm2 = padd (pm1, pm1)
def pm5 = padd (pm1, pmul (pm2, pm2))
def pm10 = pmul (pm2, pm5)
def pm100 = pmul (pm10, pm10)
def pm100b = pmul (pm2, pmul (pm2, pmul (pm5, pm5)))
def cpm100 : Eq pm100 pm100b = refl

# def imatch0_e : ({Type}, Type) -> Type = (a, b) => b
# def imatch1_e : (Type, Type) -> Type = ({a}, b) => b
def imatch2 : ({Type}, Type) -> Type = ({a}, b) => b
def imatch3 : ({Type}, Type, Type) -> Type = (a, b) => b
def imatch4 : ({a: Type}, a, a) -> a = (_, x) => x
def imatch5 : ({a: Type}, a) -> a = x => x
def imatch6 : (Type, {a: Type}, a) -> a = (_, x) => x
def icoerce : {a: Type} -> a -> ({a: Type}, a) = x => x
def it2 = do
  let {a}, _ = icoerce psuc
  a
def it3 : ({a: Type}, a) = do
  let {_}, b = icoerce psuc
  b
# def pm1b : it2 = pm1

def pinfer = (a, b: a) => b
def p_nomatch : (Type, Type) -> (Type, Type) = x => x

def universal : a -> a = x => x
# This is `({a:_} -> a -> a) -> ...`; perhaps should be `{a:_} -> (a -> a) -> ...` instead?
def universal2 = (f : a -> a) => f pinfer
def universal3 : (a -> a) -> a -> a = f => x => x
def universal4 : (a -> a) -> (a -> a) = f => f
def universal5 : (a -> a, a) -> a = (f, x) => f x
def make_pair : a -> b -> (a, b) = a => b => (a, b)
