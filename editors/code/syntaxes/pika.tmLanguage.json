{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Pika",
	"patterns": [
		{ "include": "#expression" }
	],
	"repository": {
		"expression": {
			"patterns": [
				{ "include": "#keywords" },
				{ "include": "#symbols" },
				{ "include": "#types" },
				{ "include": "#function-call" },
				{ "include": "#vars" },
				{ "include": "#literals" },
				{ "include": "#comments" },
				{ "include": "#strings" }
			]
		},
		"attributes": {
			"begin": "\\@\\[",
			"end": "\\]",
			"name": "entity.other.attribute-name.pika",
			"patterns": [
				{"include": "#strings" },
				{"include": "#literals" }
			]
		},
		"vars": {
			"match": "\\b[a-z_][a-zA-Z_0-9]*\\b",
			"name": "variable.other.pika"
		},
		"literals": {
			"match": "\\d+(\\.\\d+)?",
			"name": "constant.numeric.pika"
		},
		"comments": {
			"match": "#.*$",
			"name": "comment.line.number-sign.pika"
		},
        "types": {
            "match": "\\b([A-Z][A-Za-z_0-9]*)",
            "name": "entity.name.class.pika"
        },
		"function-call": {
    		"_comment": "This is an awful regex involving all four of {positive,negative}{lookahead,lookbehind} but it *mostly* works. Semantic tokens will be better of course",
    		"match": "(?<=(case|catch|if|then|and|or|else|let|fun|def|box|unbox|[^a-zA-Z_0-9)\\s]|^)\\s*)(?<!')\\b([a-z_][a-zA-Z_0-9]*)\\b\\s*(?!of|then|case|or|and)(?=[({\\[a-zA-Z_0-9]|<\\|)",
			"_comment": "\\b([a-z_][a-zA-Z_0-9]*)\\b\\s*(?=\\(|\\[|do\\s*)",
			"captures": {
				"2": {
					"name": "entity.name.function.pika"
				}
			}
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.pika",
				"match": "\\b(catch|case|if|else)\\b"
			},  {
                "name": "keyword.other.pika",
                "match": "\\b(type|eff|with|def|let|where|impl|mut|do|trait|imm|ref|mod)\\b"
            }]
		},
		"symbols": {
			"patterns": [{
				"match": "->|=>|<\\|\\|>",
				"name": "keyword.operator.function.pika"
			},
			{
				"match": "=>|\\|",
				"name": "keyword.operator.pattern.pikas"
			},
			{
				"match": "\\+|-|\\*\\*|\\*|/|\\^\\^|&|<<|>>",
				"name": "keyword.operator.arithmetic.pika"
			},
			{
				"match": ">=|<=|>|<|==|!=",
				"name": "keyword.operator.comparison.pika"
			},
			{
				"match": "\\b(and|or)\\b",
				"name": "keyword.other.logic.pika"
			},
			{
				"match": "=",
				"name": "keyword.operator.definition.pika"
			},
			{
				"match": ":",
				"name": "keyword.operator.type.pika"
			}]
		},
		"strings": {
			"name": "string.quoted.double.pika",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.pika",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.pika"
}
