# comment
def q : (a: Type) -> a -> a = _ => x => x

# Church equality and naturals

def Eq : {a : Type} -> a -> a -> Type = {a} => x => y => (P : a -> Type) -> P x -> P y
def refl : {a : Type} -> {x : a} -> Eq x x = P => px => px

def Nat : Type = (a : Type) -> (a -> a) -> a -> a
def one : Nat = _ => f => x => f x
def suc : Nat -> Nat = z => a => f => x => f (z a f x)
def add : Nat -> Nat -> Nat = m => n => a => f => x => m a f (n a f x)
def mul : Nat -> Nat -> Nat = m => n => a => f => x => m a (n a f) x

# Benchmarks for conversion checking
def m2 = suc one
def m5 = add one (add m2 m2)
def m10 = add m5 m5
def m10b = mul m5 m2
def m100 = mul m10 m10
def m100b = mul m10b m10b
def m1k = mul m100 m10
def m1kb = mul m100b m10b
def m2k = mul m2 m1k
def m2kb = add m1kb m1kb
def m5k = mul m1k m5
def m5kb = mul m1kb m5
def m5kc = add m1k (mul m2k m2)
def m6k = add m5k m1k
def m6kb = add m5k m1k
# def m6kb = add m5kb m1kb

def c10 : Eq m10 m10b = refl
def c100 : Eq m100 m100b = refl
# these two stack overflow in debug mode, so they're commented out
# def c5k : Eq m5k m5kb = refl
# def c6k : Eq m6k m6kb = refl
 #def c5b : Eq[FNat, m5k, m5kc] = Eq.Refl

# eta-expansion
def e : (f : Type -> Type) -> Eq (x => f x) f = f => refl

# meta tests
def c10b : Eq m10 m10b = refl
def q1 : (a : _) -> (b : _) -> a -> b -> _ = _ => _ => x => y => x
def q2 : (a : _) -> (b : _) -> a -> b -> _ = _ => _ => x => y => y

# testing for meta scope errors
# def a1 : _ = _
# def a2 : (a : Type) -> a = a => a1

# implicit parameters
def i1 = {Type} -> {b: Type} -> b -> b
def i2 : i1 -> Nat = f => f {Nat} {Nat} one
def i3 : i1 -> Nat = f => f one # note that we can't find a solution for the first implicit parameter here! this will be an error at some point
def i4 : {a : Type} -> a -> a = x => x

# inferred lambdas
def l1 = n => mul n m2
def l2 = x => y => x -> y

def Pair : Type -> Type -> Type
  = A => B => (P : Type) -> (A -> B -> P) -> P

def dup : {A:Type} -> A -> Pair A A
  = a => P => p => p a a

def id : {A:Type} -> A -> A
 = x => x

# we're exponential on this i think, but only because we zonk terms
# if we skip that, we're constant time
# but we do actually have to zonk terms soooooo
def idTest : {A:Type} -> A -> A
  = id id id id id id id id id id id id id id id id id id id id
  id id id id id id id id id id id id id id id id id id id id

def letTest = do
  let four = add m2 m2
  let five : Nat = suc four
  mul four five
# -> (λfour. (λfive. mul four five) (suc four)) (add m2 m2)

# testing type scope errors
# def illegal = do
#   let x : Type = Type
#   let p : Eq x x = refl
#   p

def pairTest = do
  let x0  = dup Type
  let x1  = dup x0
  let x2  = dup x1
  let x3  = dup x2
  let x4  = dup x3
  let x5  = dup x4
  let x6  = dup x5
  let x7  = dup x6
  let x8  = dup x7
  let x9  = dup x8
  let x10 = dup x9
  let x11 = dup x10
  let x12 = dup x11
  let x13 = dup x12
  let x14 = dup x13
  let x15 = dup x14
  let x16 = dup x15
  let x17 = dup x16
  let x18 = dup x17
  let x19 = dup x18
  let x20 = dup x19
  let x21 = dup x20
  let x22 = dup x21
  let x23 = dup x22
  let x24 = dup x23
  let x25 = dup x24
  let x26 = dup x25
  let x27 = dup x26
  let x28 = dup x27
  let x29 = dup x28
  let x30 = dup x29
  # exponential time if we change this to x30 :(
  x1
